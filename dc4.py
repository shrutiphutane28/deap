# -*- coding: utf-8 -*-
"""DC4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TfN43N8sUDfu-TAxlLaRgLJ8-c7RFRON
"""

import itertools

# List of available servers
servers = ["S1", "S2", "S3"]

"""1. Round Robin"""

def round_robin(servers, requests):
    """
    Distributes requests using Round Robin scheduling.
    """
    print("\n--- Round Robin ---")
    rr_cycle = itertools.cycle(servers)  # Cycles through servers endlessly
    for i in range(requests):
        selected_server = next(rr_cycle)
        print(f"Request {i+1} -> {selected_server}")

"""2. Weighted Round Robin  """

def weighted_round_robin(servers, weights, requests):
    """
    Distributes requests using Weighted Round Robin scheduling.
    """
    print("\n--- Weighted Round Robin ---")

    # Create weighted server list by repeating each server based on its weight
    weighted_servers = [server for server, weight in zip(servers, weights) for _ in range(weight)]

    # Use cyclic iterator to distribute requests
    wrr_cycle = itertools.cycle(weighted_servers)
    for i in range(requests):
        selected_server = next(wrr_cycle)
        print(f"Request {i+1} -> {selected_server}")

"""3. Least Connections"""

def least_connections(servers, requests):
    """
    Distributes requests to the server with the least number of current connections.
    """
    print("\n--- Least Connections ---")

    # Dictionary to track the number of active connections per server
    connections = {server: 0 for server in servers}

    for i in range(requests):
        # Find the server with the least current connections
        least_loaded = min(connections, key=connections.get)

        # Assign the request to this server
        print(f"Request {i+1} -> {least_loaded}")

        # Simulate an increase in load
        connections[least_loaded] += 1

    # Display final connection count
    print("\nFinal connection count per server:")
    for server, count in connections.items():
        print(f"{server}: {count}")

"""Function Calls"""

if __name__ == "__main__":
    # Example usage
    num_requests = 10
    round_robin(servers, 6)
    weighted_round_robin(servers, [3, 1, 2], num_requests)
    least_connections(servers, num_requests)