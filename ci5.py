# -*- coding: utf-8 -*-
"""CI5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWrMS_ky4xXRnCPzXyQ9HzaFiPFeNaCh
"""

import numpy as np

"""Distance Matrix"""

cities = np.array([
    [0, 2, 9, 10, 7, 14, 11],
    [1, 0, 6, 4, 12, 8, 10],
    [15, 7, 0, 8, 6, 9, 13],
    [6, 3, 12, 0, 9, 11, 5],
    [7, 12, 6, 9, 0, 4, 8],
    [14, 8, 9, 11, 4, 0, 6],
    [11, 10, 13, 5, 8, 6, 0]
])

"""ACO Parameters"""

num_ants = 10
num_iterations = 100
decay = 0.1           # Pheromone evaporation rate
alpha = 1             # Influence of pheromone
beta = 2              # Influence of distance
num_cities = cities.shape[0]

# Initialize pheromone matrix
pheromone = np.ones((num_cities, num_cities)) / num_cities

"""Helper Functions"""

def route_distance(route):
    """Calculate total distance of a route, including return to start."""
    return sum(cities[route[i], route[(i + 1) % num_cities]] for i in range(num_cities))

def select_next_city(probabilities):
    """Select the next city based on given probabilities."""
    return np.random.choice(len(probabilities), p=probabilities)

"""Main ACO Loop"""

best_cost = float('inf')
best_path = None

for iteration in range(num_iterations):
    all_routes = []
    all_distances = []

    for ant in range(num_ants):
        visited = []
        current_city = np.random.randint(num_cities)
        visited.append(current_city)

        while len(visited) < num_cities:
            unvisited = list(set(range(num_cities)) - set(visited))
            pheromone_vals = np.array([pheromone[current_city][j] for j in unvisited])
            distance_vals = np.array([cities[current_city][j] for j in unvisited])
            heuristic_vals = 1 / (distance_vals + 1e-10)  # Add epsilon to avoid division by zero

            prob = (pheromone_vals ** alpha) * (heuristic_vals ** beta)
            prob /= prob.sum()

            next_city = unvisited[select_next_city(prob)]
            visited.append(next_city)
            current_city = next_city

        route = visited
        distance = route_distance(route)
        all_routes.append(route)
        all_distances.append(distance)

        if distance < best_cost:
            best_cost = distance
            best_path = route

    # Evaporate pheromone
    pheromone *= (1 - decay)

    # Deposit new pheromone
    for route, dist in zip(all_routes, all_distances):
        for i in range(num_cities):
            a = route[i]
            b = route[(i + 1) % num_cities]
            pheromone[a][b] += 1 / dist
            pheromone[b][a] += 1 / dist  # Since it's symmetric

"""Final Output"""

print("\nBest Path Found:")
print(best_path + [best_path[0]])  # Complete the tour
print("Total Distance:", round(best_cost, 2))