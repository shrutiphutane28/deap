# -*- coding: utf-8 -*-
"""CI3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ayq25g_rcKMXH3NmUr-PSEFRuZ5baH7g

Import Libraries
"""

import numpy as np
import matplotlib.pyplot as plt

"""Generate synthetic 2D data with binary labels"""

def generate_data(n=200):
    X = np.random.rand(n, 2)  # n random 2D points (features in range 0 to 1)
    y = ((X[:, 0] > 0.5) & (X[:, 1] > 0.5)).astype(int)  # Label 1 if both features > 0.5
    return X, y

"""NSA Classifier"""

class NSAClassifier:
    def __init__(self, num_detectors=50, radius=0.1):
        self.num_detectors = num_detectors  # Total detectors to generate
        self.radius = radius  # Detector sensitivity (distance threshold)
        self.detectors = []  # Store trained detectors

    def train(self, X_self):
        # Create detectors that are far from all "self" points
        while len(self.detectors) < self.num_detectors:
            candidate = np.random.rand(2)  # Random detector candidate
            if all(np.linalg.norm(candidate - x) > self.radius for x in X_self):
                self.detectors.append(candidate)

    def predict(self, X):
        predictions = []
        for x in X:
            # If close to any detector, classify as damaged (1)
            if any(np.linalg.norm(x - d) <= self.radius for d in self.detectors):
                predictions.append(1)
            else:
                predictions.append(0)  # Else classify as safe (0)
        return np.array(predictions)

"""Generate data and split it"""

X, y = generate_data()
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

X_self = X_train[y_train == 0]  # Use only "safe" samples to train

clf = NSAClassifier(num_detectors=50, radius=0.1)
clf.train(X_self)

y_pred = clf.predict(X_test)

"""Accuracy check"""

acc = np.mean(y_pred == y_test)
print("Accuracy:", acc)

"""Visualize"""

plt.figure(figsize=(8, 6))
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_pred, cmap='coolwarm', edgecolor='k', label='Test Data')
plt.scatter(np.array(clf.detectors)[:, 0], np.array(clf.detectors)[:, 1],
            c='green', marker='x', label='Detectors')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('NSA Classifier - Predicted Damage (Red=Damaged, Blue=Safe)')
plt.legend()
plt.grid(True)
plt.show()

